{"version":3,"mappings":"8EAAA,cAGA,mCACA,8CACA,gCACAA,IAGAC,cACAA,YACAA,UACAC,0ECTA,MAAMC,EAAiB,GAMhB,IAAMC,EAAb,MAAM,sDAAOA,4DAHF,CAACC,aAAqBF,IACrBE,QAECD,GAAb,iBCDO,IAAME,EAAb,MAAM,QAKJC,YACUC,EACAC,GADAC,gBACAA,cALVA,yBAAsB,uBACtBA,sBAAmB,0FAQnBC,2BACED,KAAKD,OAAOG,oBAAoB,CAC9BC,gBAAiBH,KAAKI,mBACrBC,KAAKC,IACNC,QAAQC,IAAI,uCAAwCF,GACpDN,KAAKS,oBAAsBC,KAAKC,UAAUL,KACzCM,MAAMC,IACPN,QAAQO,MAAM,uCAAwCD,KAI1DE,WACMf,KAAKF,SAASkB,YAChBhB,KAAKF,SAASmB,UAAUC,UAAU,KAC5BC,QAAQ,6CACVC,OAAOC,SAASC,WAGpBf,QAAQC,IAAI,8DA7BLZ,GAAY2B,kDAAZ3B,EAAY4B,sHCRzBD,oBAAsCA,gCAASE,+BAC7CF,wBACFA,QACAA,cACAA,cACAA,aAAGA,SAAuBA,eAAvBA,8FDGU3B,GAAb,GEiBO,IAAM8B,EAAb,MAAM,sDAAOA,8BAASC,WAFR/B,kCADD,GAAEgC,SAVJ,CACPC,KACAnC,EACAoC,cAA6B,iBAAkB,CAC7CC,QCfQ,KDkBRC,qBAAsB,iCAMfN,GAAb,IElBEO,WAGFC,OAAyBC,gBAAgBT,GACtCd,MAAMC,GAAON,QAAQO,MAAMD","names":["i","n","s","routes","AppRoutingModule","RouterModule","AppComponent","constructor","swUpdate","swPush","this","subscribeToNotifications","requestSubscription","serverPublicKey","VAPID_PUBLIC_KEY","then","sub","console","log","subscriptionDetails","JSON","stringify","catch","err","error","ngOnInit","isEnabled","available","subscribe","confirm","window","location","reload","i0","selectors","ctx","AppModule","bootstrap","imports","BrowserModule","ServiceWorkerModule","enabled","registrationStrategy","enableProdMode","__NgCli_bootstrap_1","bootstrapModule"],"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.prod.ts","./src/main.ts"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { SwPush, SwUpdate } from '@angular/service-worker';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n\n  subscriptionDetails = 'Not yet subscribed !'\n  VAPID_PUBLIC_KEY = \"BGVVbWxcDH1nNQgbFJCM_EZNSNd3MQbf1tCXPXSJ6zkdwHwHmUeLgJZDMoxADD9rVnjwEQ3NY-hcivbApG0a10U\";\n\n  constructor(\n    private swUpdate: SwUpdate,\n    private swPush: SwPush\n  ) { }\n\n\n  subscribeToNotifications() {\n    this.swPush.requestSubscription({\n      serverPublicKey: this.VAPID_PUBLIC_KEY\n    }).then(sub => {\n      console.log(\"Notification Subcription Success !!!\", sub);\n      this.subscriptionDetails = JSON.stringify(sub);\n    }).catch(err => {\n      console.error(\"Could not subscribe to notifications\", err)\n    });\n  }\n\n  ngOnInit() {\n    if (this.swUpdate.isEnabled) {\n      this.swUpdate.available.subscribe(() => {\n        if (confirm(\"New version available. Load New Version?\")) {\n          window.location.reload();\n        }\n      });\n      console.log(\"PWA Enabled\");\n    }\n  }\n\n}\n","<button class=\"button button-primary\" (click)=\"subscribeToNotifications()\">\n  Subscribe\n</button>\n<br />\n<br />\n<p>{{subscriptionDetails}}</p>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: environment.production,\n      // Register the ServiceWorker as soon as the app is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000'\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export const environment = {\n  production: true\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///","file":"main.917af245ab85eca2a5ee.js"}